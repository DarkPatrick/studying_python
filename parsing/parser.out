Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     statement -> NAME = expression
Rule 3     expression -> expression > expression
Rule 4     expression -> expression | expression
Rule 5     expression -> expression + expression
Rule 6     expression -> expression & expression
Rule 7     expression -> - expression
Rule 8     expression -> ( expression )
Rule 9     expression -> NUMBER
Rule 10    expression -> NAME

Terminals, with rules where they appear

&                    : 6
(                    : 8
)                    : 8
+                    : 5
-                    : 7
=                    : 2
>                    : 3
NAME                 : 2 10
NUMBER               : 9
error                : 
|                    : 4

Nonterminals, with rules where they appear

expression           : 1 2 3 3 4 4 5 5 6 6 7 8
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) statement -> . NAME = expression
    (3) expression -> . expression > expression
    (4) expression -> . expression | expression
    (5) expression -> . expression + expression
    (6) expression -> . expression & expression
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . NAME

    NAME            shift and go to state 6
    -               shift and go to state 5
    (               shift and go to state 1
    NUMBER          shift and go to state 3

    statement                      shift and go to state 2
    expression                     shift and go to state 4

state 1

    (8) expression -> ( . expression )
    (3) expression -> . expression > expression
    (4) expression -> . expression | expression
    (5) expression -> . expression + expression
    (6) expression -> . expression & expression
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . NAME

    -               shift and go to state 5
    (               shift and go to state 1
    NUMBER          shift and go to state 3
    NAME            shift and go to state 8

    expression                     shift and go to state 7

state 2

    (0) S' -> statement .



state 3

    (9) expression -> NUMBER .

    >               reduce using rule 9 (expression -> NUMBER .)
    |               reduce using rule 9 (expression -> NUMBER .)
    +               reduce using rule 9 (expression -> NUMBER .)
    &               reduce using rule 9 (expression -> NUMBER .)
    $end            reduce using rule 9 (expression -> NUMBER .)
    )               reduce using rule 9 (expression -> NUMBER .)


state 4

    (1) statement -> expression .
    (3) expression -> expression . > expression
    (4) expression -> expression . | expression
    (5) expression -> expression . + expression
    (6) expression -> expression . & expression

    $end            reduce using rule 1 (statement -> expression .)
    >               shift and go to state 12
    |               shift and go to state 11
    +               shift and go to state 9
    &               shift and go to state 10


state 5

    (7) expression -> - . expression
    (3) expression -> . expression > expression
    (4) expression -> . expression | expression
    (5) expression -> . expression + expression
    (6) expression -> . expression & expression
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . NAME

    -               shift and go to state 5
    (               shift and go to state 1
    NUMBER          shift and go to state 3
    NAME            shift and go to state 8

    expression                     shift and go to state 13

state 6

    (2) statement -> NAME . = expression
    (10) expression -> NAME .

    =               shift and go to state 14
    >               reduce using rule 10 (expression -> NAME .)
    |               reduce using rule 10 (expression -> NAME .)
    +               reduce using rule 10 (expression -> NAME .)
    &               reduce using rule 10 (expression -> NAME .)
    $end            reduce using rule 10 (expression -> NAME .)


state 7

    (8) expression -> ( expression . )
    (3) expression -> expression . > expression
    (4) expression -> expression . | expression
    (5) expression -> expression . + expression
    (6) expression -> expression . & expression

    )               shift and go to state 15
    >               shift and go to state 12
    |               shift and go to state 11
    +               shift and go to state 9
    &               shift and go to state 10


state 8

    (10) expression -> NAME .

    )               reduce using rule 10 (expression -> NAME .)
    >               reduce using rule 10 (expression -> NAME .)
    |               reduce using rule 10 (expression -> NAME .)
    +               reduce using rule 10 (expression -> NAME .)
    &               reduce using rule 10 (expression -> NAME .)
    $end            reduce using rule 10 (expression -> NAME .)


state 9

    (5) expression -> expression + . expression
    (3) expression -> . expression > expression
    (4) expression -> . expression | expression
    (5) expression -> . expression + expression
    (6) expression -> . expression & expression
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . NAME

    -               shift and go to state 5
    (               shift and go to state 1
    NUMBER          shift and go to state 3
    NAME            shift and go to state 8

    expression                     shift and go to state 16

state 10

    (6) expression -> expression & . expression
    (3) expression -> . expression > expression
    (4) expression -> . expression | expression
    (5) expression -> . expression + expression
    (6) expression -> . expression & expression
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . NAME

    -               shift and go to state 5
    (               shift and go to state 1
    NUMBER          shift and go to state 3
    NAME            shift and go to state 8

    expression                     shift and go to state 17

state 11

    (4) expression -> expression | . expression
    (3) expression -> . expression > expression
    (4) expression -> . expression | expression
    (5) expression -> . expression + expression
    (6) expression -> . expression & expression
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . NAME

    -               shift and go to state 5
    (               shift and go to state 1
    NUMBER          shift and go to state 3
    NAME            shift and go to state 8

    expression                     shift and go to state 18

state 12

    (3) expression -> expression > . expression
    (3) expression -> . expression > expression
    (4) expression -> . expression | expression
    (5) expression -> . expression + expression
    (6) expression -> . expression & expression
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . NAME

    -               shift and go to state 5
    (               shift and go to state 1
    NUMBER          shift and go to state 3
    NAME            shift and go to state 8

    expression                     shift and go to state 19

state 13

    (7) expression -> - expression .
    (3) expression -> expression . > expression
    (4) expression -> expression . | expression
    (5) expression -> expression . + expression
    (6) expression -> expression . & expression

    >               reduce using rule 7 (expression -> - expression .)
    |               reduce using rule 7 (expression -> - expression .)
    +               reduce using rule 7 (expression -> - expression .)
    &               reduce using rule 7 (expression -> - expression .)
    $end            reduce using rule 7 (expression -> - expression .)
    )               reduce using rule 7 (expression -> - expression .)

  ! >               [ shift and go to state 12 ]
  ! |               [ shift and go to state 11 ]
  ! +               [ shift and go to state 9 ]
  ! &               [ shift and go to state 10 ]


state 14

    (2) statement -> NAME = . expression
    (3) expression -> . expression > expression
    (4) expression -> . expression | expression
    (5) expression -> . expression + expression
    (6) expression -> . expression & expression
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . NAME

    -               shift and go to state 5
    (               shift and go to state 1
    NUMBER          shift and go to state 3
    NAME            shift and go to state 8

    expression                     shift and go to state 20

state 15

    (8) expression -> ( expression ) .

    >               reduce using rule 8 (expression -> ( expression ) .)
    |               reduce using rule 8 (expression -> ( expression ) .)
    +               reduce using rule 8 (expression -> ( expression ) .)
    &               reduce using rule 8 (expression -> ( expression ) .)
    $end            reduce using rule 8 (expression -> ( expression ) .)
    )               reduce using rule 8 (expression -> ( expression ) .)


state 16

    (5) expression -> expression + expression .
    (3) expression -> expression . > expression
    (4) expression -> expression . | expression
    (5) expression -> expression . + expression
    (6) expression -> expression . & expression

    >               reduce using rule 5 (expression -> expression + expression .)
    |               reduce using rule 5 (expression -> expression + expression .)
    +               reduce using rule 5 (expression -> expression + expression .)
    $end            reduce using rule 5 (expression -> expression + expression .)
    )               reduce using rule 5 (expression -> expression + expression .)
    &               shift and go to state 10

  ! &               [ reduce using rule 5 (expression -> expression + expression .) ]
  ! >               [ shift and go to state 12 ]
  ! |               [ shift and go to state 11 ]
  ! +               [ shift and go to state 9 ]


state 17

    (6) expression -> expression & expression .
    (3) expression -> expression . > expression
    (4) expression -> expression . | expression
    (5) expression -> expression . + expression
    (6) expression -> expression . & expression

    >               reduce using rule 6 (expression -> expression & expression .)
    |               reduce using rule 6 (expression -> expression & expression .)
    +               reduce using rule 6 (expression -> expression & expression .)
    &               reduce using rule 6 (expression -> expression & expression .)
    $end            reduce using rule 6 (expression -> expression & expression .)
    )               reduce using rule 6 (expression -> expression & expression .)

  ! >               [ shift and go to state 12 ]
  ! |               [ shift and go to state 11 ]
  ! +               [ shift and go to state 9 ]
  ! &               [ shift and go to state 10 ]


state 18

    (4) expression -> expression | expression .
    (3) expression -> expression . > expression
    (4) expression -> expression . | expression
    (5) expression -> expression . + expression
    (6) expression -> expression . & expression

    >               reduce using rule 4 (expression -> expression | expression .)
    |               reduce using rule 4 (expression -> expression | expression .)
    +               reduce using rule 4 (expression -> expression | expression .)
    $end            reduce using rule 4 (expression -> expression | expression .)
    )               reduce using rule 4 (expression -> expression | expression .)
    &               shift and go to state 10

  ! &               [ reduce using rule 4 (expression -> expression | expression .) ]
  ! >               [ shift and go to state 12 ]
  ! |               [ shift and go to state 11 ]
  ! +               [ shift and go to state 9 ]


state 19

    (3) expression -> expression > expression .
    (3) expression -> expression . > expression
    (4) expression -> expression . | expression
    (5) expression -> expression . + expression
    (6) expression -> expression . & expression

    >               reduce using rule 3 (expression -> expression > expression .)
    $end            reduce using rule 3 (expression -> expression > expression .)
    )               reduce using rule 3 (expression -> expression > expression .)
    |               shift and go to state 11
    +               shift and go to state 9
    &               shift and go to state 10

  ! |               [ reduce using rule 3 (expression -> expression > expression .) ]
  ! +               [ reduce using rule 3 (expression -> expression > expression .) ]
  ! &               [ reduce using rule 3 (expression -> expression > expression .) ]
  ! >               [ shift and go to state 12 ]


state 20

    (2) statement -> NAME = expression .
    (3) expression -> expression . > expression
    (4) expression -> expression . | expression
    (5) expression -> expression . + expression
    (6) expression -> expression . & expression

    $end            reduce using rule 2 (statement -> NAME = expression .)
    >               shift and go to state 12
    |               shift and go to state 11
    +               shift and go to state 9
    &               shift and go to state 10

